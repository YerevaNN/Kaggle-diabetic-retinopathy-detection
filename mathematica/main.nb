Notebook[{
Cell[TextData[StyleBox["Green 01v234 Rotations (81K)", "Title"]], "Text",
 CellChangeTimes->{{3.641283880123969*^9, 3.6412838880982122`*^9}, {
  3.64129587675521*^9, 3.6412958788351955`*^9}, {3.643348321440319*^9, 
  3.643348322254856*^9}, {3.643426150306432*^9, 3.643426152028139*^9}, {
  3.643561766279295*^9, 3.6435617668326607`*^9}, {3.645896972150072*^9, 
  3.645896976002179*^9}, {3.645949202472595*^9, 3.645949203124623*^9}, {
  3.646034835042059*^9, 3.6460348351992683`*^9}, {3.6460384136692495`*^9, 
  3.646038418319352*^9}, {3.646056539517623*^9, 3.646056541317258*^9}, {
  3.646731623307202*^9, 3.6467316291040964`*^9}}],

Cell[TextData[StyleBox["Import data", "Section"]], "Input",
 FormatType->"TextForm"],

Cell[BoxData[
 RowBox[{
  RowBox[{"rotations", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<0\>\"", ",", "\"\<0v\>\"", ",", "\"\<180\>\"", ",", "\"\<180v\>\""}],
     "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.645949215736943*^9, 3.6459492403394356`*^9}, {
   3.6460348398555565`*^9, 3.646034842660624*^9}, 3.646041741333908*^9, {
   3.646043266293023*^9, 3.646043266551193*^9}, {3.6460462632514205`*^9, 
   3.646046263490574*^9}, 3.646056529976676*^9, {3.646056582269928*^9, 
   3.6460565831019506`*^9}, {3.646061886048716*^9, 3.646061897605298*^9}, {
   3.6460706962838435`*^9, 3.646070697813037*^9}, {3.6460710588049173`*^9, 
   3.6460710591649246`*^9}, {3.646097020259679*^9, 3.646097021023691*^9}, {
   3.6460984777351923`*^9, 3.646098478236562*^9}, {3.646113360852852*^9, 
   3.6461133612404885`*^9}, {3.6461222027689238`*^9, 
   3.6461222039121733`*^9}, {3.64612226118489*^9, 3.646122263921012*^9}, {
   3.6461575273562565`*^9, 3.6461575278045616`*^9}, {3.646157566473873*^9, 
   3.6461575711409883`*^9}, {3.6461850199558215`*^9, 
   3.6461850207638426`*^9}, {3.6461850587934866`*^9, 
   3.6461850606295424`*^9}, {3.6461851287705927`*^9, 
   3.6461851300466332`*^9}, {3.6462063849626803`*^9, 3.646206399605167*^9}, {
   3.646206436238263*^9, 3.646206437994254*^9}, {3.646242547718774*^9, 
   3.6462425481110373`*^9}, {3.6462430359662547`*^9, 
   3.6462430396894965`*^9}, {3.646293872183623*^9, 3.646293872415778*^9}, {
   3.6467316337512264`*^9, 3.646731639785283*^9}, {3.646732372432499*^9, 
   3.646732375383482*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"validation", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"Import", "[", 
      RowBox[{
       RowBox[{"NotebookDirectory", "[", "]"}], "<>", 
       "\"\<validations_g_01v234_40r-2-40r-2-40r-2-40r-4-256rd0.5-256rd0.5-\
wd0-lr0.001_48K-wd0.0015_iter_81000_\>\"", "<>", 
       RowBox[{"ToString", "[", "#", "]"}], "<>", "\"\<.csv\>\""}], "]"}], 
     "&"}], "/@", "rotations"}]}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"validationGE", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"Import", "[", 
      RowBox[{
       RowBox[{"NotebookDirectory", "[", "]"}], "<>", 
       "\"\<validations_ge_01v234_40r-2-40r-2-40r-2-40r-4-256rd0.5-256rd0.5-\
wd0.0001-lr0.001_24K-lr0.0003_iter_54000_\>\"", "<>", 
       RowBox[{"ToString", "[", "#", "]"}], "<>", "\"\<.csv\>\""}], "]"}], 
     "&"}], "/@", "rotations"}]}], ";"}]], "Input"],

Cell[CellGroupData[{

Cell["Lots of helpful functions", "Section"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ConfusionMatrix", "[", "gndpre_List", "]"}], ":=", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"categories", "=", 
      RowBox[{"Union", "[", 
       RowBox[{"Flatten", "[", "gndpre", "]"}], "]"}]}], "}"}], ",", 
    RowBox[{"Partition", "[", 
     RowBox[{
      RowBox[{"Flatten", "[", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"Count", "[", 
          RowBox[{"gndpre", ",", 
           RowBox[{"{", 
            RowBox[{"row", ",", "col"}], "}"}]}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"row", ",", "categories"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"col", ",", "categories"}], "}"}]}], "]"}], "]"}], ",", 
      RowBox[{"Length", "[", "categories", "]"}]}], "]"}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"AuxMatrix", "[", "m_", "]"}], ":=", 
  RowBox[{"N", "[", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Total", "[", 
       RowBox[{"m", "[", 
        RowBox[{"[", 
         RowBox[{"i", ",", "All"}], "]"}], "]"}], "]"}], "*", 
      RowBox[{
       RowBox[{"Total", "[", 
        RowBox[{"m", "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", "j"}], "]"}], "]"}], "]"}], "/", 
       RowBox[{"Total", "[", 
        RowBox[{"Total", "[", "m", "]"}], "]"}]}]}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", 
       RowBox[{"Length", "[", "m", "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"j", ",", "1", ",", 
       RowBox[{"Length", "[", "m", "]"}]}], "}"}]}], "]"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SumProduct", "[", 
   RowBox[{"a_", ",", "b_"}], "]"}], ":=", 
  RowBox[{"Total", "[", 
   RowBox[{"Total", "[", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"a", "[", 
        RowBox[{"[", 
         RowBox[{"i", ",", "j"}], "]"}], "]"}], "*", 
       RowBox[{"b", "[", 
        RowBox[{"[", 
         RowBox[{"i", ",", "j"}], "]"}], "]"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "1", ",", 
        RowBox[{"Length", "[", "a", "]"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"j", ",", "1", ",", 
        RowBox[{"Length", "[", "b", "]"}]}], "}"}]}], "]"}], "]"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Kappa", "[", "m_", "]"}], ":=", 
  RowBox[{"1", "-", 
   RowBox[{
    RowBox[{"SumProduct", "[", 
     RowBox[{"m", ",", "w"}], "]"}], "/", 
    RowBox[{"SumProduct", "[", 
     RowBox[{"w", ",", 
      RowBox[{"AuxMatrix", "[", "m", "]"}]}], 
     "]"}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Kappa2", "[", "m_", "]"}], ":=", 
  RowBox[{"1", "-", 
   RowBox[{
    RowBox[{"SumProduct", "[", 
     RowBox[{"m", ",", "w2"}], "]"}], "/", 
    RowBox[{"SumProduct", "[", 
     RowBox[{"w2", ",", 
      RowBox[{"AuxMatrix", "[", "m", "]"}]}], 
     "]"}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"w", " ", "=", " ", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{"i", "-", "j"}], ")"}], "^", "2"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", "5"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"j", ",", "1", ",", "5"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"w2", "=", " ", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{"i", "-", "j"}], ")"}], "^", "2"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"j", ",", "1", ",", "2"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"mapToClass", "[", 
    RowBox[{"n1_", ",", "n2_", ",", "n3_", ",", "n4_", ",", "data_"}], "]"}], 
   ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"data", ">", "n4"}], ",", "4", ",", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"data", ">", "n3"}], ",", "3", ",", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"data", ">", "n2"}], ",", "2", ",", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"data", ">", "n1"}], ",", "1", ",", "0"}], "]"}]}], 
        "]"}]}], "]"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"mapToClass2", "[", 
   RowBox[{
   "n1_", ",", "n2_", ",", "n3_", ",", "n4_", ",", "m1_", ",", "m2_", ",", 
    "m3_", ",", "m4_", ",", "n_", ",", "m_"}], "]"}], ":=", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"n", ">", "n4"}], "&&", 
     RowBox[{"m", ">", "m4"}]}], ",", "4", ",", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"n", ">", "n3"}], "&&", 
       RowBox[{"m", ">", "m3"}]}], ",", "3", ",", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"n", ">", "n2"}], "&&", 
         RowBox[{"m", ">", "m2"}]}], ",", "2", ",", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"n", ">", "n1"}], "&&", 
           RowBox[{"m", ">", "m1"}]}], ",", "1", ",", "0"}], "]"}]}], "]"}]}],
      "]"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"mapToClassDiag", "[", 
    RowBox[{
    "b1_", ",", "b2_", ",", "b3_", ",", "b4_", ",", "k_", ",", "x_", ",", 
     "y_"}], "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"y", ">", 
      RowBox[{
       RowBox[{"k", "*", "x"}], "+", "b4"}]}], ",", "4", ",", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"y", ">", 
        RowBox[{
         RowBox[{"k", "*", "x"}], "+", "b3"}]}], ",", "3", ",", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"y", ">", 
          RowBox[{
           RowBox[{"k", "*", "x"}], "+", "b2"}]}], ",", "2", ",", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"y", ">", 
            RowBox[{
             RowBox[{"k", "*", "x"}], "+", "b2"}]}], ",", "2", ",", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"y", ">", 
              RowBox[{
               RowBox[{"k", "*", "x"}], "+", "b1"}]}], ",", "1", ",", "0"}], 
            "]"}]}], "]"}]}], "]"}]}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"KCMerged", "[", 
    RowBox[{
    "n1_", ",", "n2_", ",", "n3_", ",", "n4_", ",", "m1_", ",", "m2_", ",", 
     "m3_", ",", "m4_", ",", "data_"}], "]"}], ":=", 
   RowBox[{"Kappa", "[", 
    RowBox[{"ConfusionMatrix", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"#", "[", 
          RowBox[{"[", "2", "]"}], "]"}], ",", 
         RowBox[{"mapToClass2", "[", 
          RowBox[{
          "n1", ",", "n2", ",", "n3", ",", "n4", ",", "m1", ",", "m2", ",", 
           "m3", ",", "m4", ",", 
           RowBox[{"#", "[", 
            RowBox[{"[", "8", "]"}], "]"}], ",", 
           RowBox[{"#", "[", 
            RowBox[{"[", "4", "]"}], "]"}]}], "]"}]}], "}"}], "&"}], "/@", 
      "data"}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"KCMergedDiag", "[", 
    RowBox[{
    "b1_", ",", "b2_", ",", "b3_", ",", "b4_", ",", "k_", ",", "data_"}], 
    "]"}], ":=", 
   RowBox[{"Kappa", "[", 
    RowBox[{"ConfusionMatrix", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"#", "[", 
          RowBox[{"[", "2", "]"}], "]"}], ",", 
         RowBox[{"mapToClassDiag", "[", 
          RowBox[{"b1", ",", "b2", ",", "b3", ",", "b4", ",", "k", ",", 
           RowBox[{"#", "[", 
            RowBox[{"[", "8", "]"}], "]"}], ",", 
           RowBox[{"#", "[", 
            RowBox[{"[", "4", "]"}], "]"}]}], "]"}]}], "}"}], "&"}], "/@", 
      "data"}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"divisionLines2", "[", 
    RowBox[{
    "n1_", ",", "n2_", ",", "n3_", ",", "n4_", ",", "m1_", ",", "m2_", ",", 
     "m3_", ",", "m4_"}], "]"}], ":=", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Line", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"n1", ",", "m1"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"n1", ",", "10"}], "}"}]}], "}"}], "]"}], ",", 
     RowBox[{"Line", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"n1", ",", "m1"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"10", ",", "m1"}], "}"}]}], "}"}], "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Line", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"n2", ",", "m2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"n2", ",", "10"}], "}"}]}], "}"}], "]"}], ",", 
     RowBox[{"Line", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"n2", ",", "m2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"10", ",", "m2"}], "}"}]}], "}"}], "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Line", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"n3", ",", "m3"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"n3", ",", "10"}], "}"}]}], "}"}], "]"}], ",", 
     RowBox[{"Line", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"n3", ",", "m3"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"10", ",", "m3"}], "}"}]}], "}"}], "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Line", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"n4", ",", "m4"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"n4", ",", "10"}], "}"}]}], "}"}], "]"}], ",", 
     RowBox[{"Line", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"n4", ",", "m4"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"10", ",", "m4"}], "}"}]}], "}"}], "]"}]}], 
    "\[IndentingNewLine]", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"divisionLinesDiag", "[", 
    RowBox[{"b1_", ",", "b2_", ",", "b3_", ",", "b4_", ",", "k_"}], "]"}], ":=", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Line", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "10"}], ",", 
          RowBox[{
           RowBox[{"k", "*", 
            RowBox[{"-", "10"}]}], "+", "b1"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"10", ",", 
          RowBox[{
           RowBox[{"k", "*", "10"}], "+", "b1"}]}], "}"}]}], "}"}], "]"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"Line", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "10"}], ",", 
          RowBox[{
           RowBox[{"k", "*", 
            RowBox[{"-", "10"}]}], "+", "b2"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"10", ",", 
          RowBox[{
           RowBox[{"k", "*", "10"}], "+", "b2"}]}], "}"}]}], "}"}], "]"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"Line", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "10"}], ",", 
          RowBox[{
           RowBox[{"k", "*", 
            RowBox[{"-", "10"}]}], "+", "b3"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"10", ",", 
          RowBox[{
           RowBox[{"k", "*", "10"}], "+", "b3"}]}], "}"}]}], "}"}], "]"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"Line", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "10"}], ",", 
          RowBox[{
           RowBox[{"k", "*", 
            RowBox[{"-", "10"}]}], "+", "b4"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"10", ",", 
          RowBox[{
           RowBox[{"k", "*", "10"}], "+", "b4"}]}], "}"}]}], "}"}], "]"}]}], 
    "\[IndentingNewLine]", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getmax", "[", "data_", "]"}], ":=", 
   RowBox[{"data", "[", 
    RowBox[{"[", 
     RowBox[{
      RowBox[{
       RowBox[{"Position", "[", 
        RowBox[{"data", ",", 
         RowBox[{"Max", "[", 
          RowBox[{"data", "[", 
           RowBox[{"[", 
            RowBox[{"All", ",", "5"}], "]"}], "]"}], "]"}]}], "]"}], "[", 
       RowBox[{"[", "1", "]"}], "]"}], "[", 
      RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getmax2", "[", "data_", "]"}], ":=", 
   RowBox[{"data", "[", 
    RowBox[{"[", 
     RowBox[{
      RowBox[{
       RowBox[{"Position", "[", 
        RowBox[{"data", ",", 
         RowBox[{"Max", "[", 
          RowBox[{"data", "[", 
           RowBox[{"[", 
            RowBox[{"All", ",", "2"}], "]"}], "]"}], "]"}]}], "]"}], "[", 
       RowBox[{"[", "1", "]"}], "]"}], "[", 
      RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"prepareForListPlot", "[", 
    RowBox[{"data_", ",", "offset_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"#", "[", 
        RowBox[{"[", "4", "]"}], "]"}], ",", 
       RowBox[{
        RowBox[{"#", "[", 
         RowBox[{"[", "2", "]"}], "]"}], "+", 
        RowBox[{"0.1", "*", "offset"}], "+", 
        RowBox[{"0.1", "*", 
         RowBox[{"RandomReal", "[", 
          RowBox[{"{", 
           RowBox[{"0", ",", "1"}], "}"}], "]"}]}]}]}], "}"}], "&"}], "/@", 
    "data"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"selectData", "[", 
    RowBox[{"data_", ",", "label_"}], "]"}], ":=", 
   RowBox[{"Select", "[", 
    RowBox[{"data", ",", 
     RowBox[{
      RowBox[{
       RowBox[{"#", "[", 
        RowBox[{"[", "2", "]"}], "]"}], "\[Equal]", "label"}], "&"}]}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"binCountsForLabel", "[", 
    RowBox[{"data_", ",", "label_"}], "]"}], ":=", 
   RowBox[{"BinCounts", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"selectData", "[", 
       RowBox[{"data", ",", "label"}], "]"}], "[", 
      RowBox[{"[", 
       RowBox[{"All", ",", "4"}], "]"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.2"}], ",", "1.4", ",", "0.05"}], "}"}]}], "]"}]}], 
  RowBox[{"(*", 
   RowBox[{"/", 
    RowBox[{"Length", "[", 
     RowBox[{"selectData", "[", 
      RowBox[{"data", ",", "label"}], "]"}], "]"}]}], "*)"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"binCountsForData", "[", "data_", "]"}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{"binCountsForLabel", "[", 
      RowBox[{"data", ",", "#"}], "]"}], "&"}], "/@", 
    RowBox[{"{", 
     RowBox[{"0", ",", "1", ",", "2", ",", "3", ",", "4"}], "}"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"KCS", "[", 
    RowBox[{"n1_", ",", "n2_", ",", "n3_", ",", "n4_", ",", "data_"}], "]"}], 
   ":=", 
   RowBox[{"Kappa", "[", 
    RowBox[{"ConfusionMatrix", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"#", "[", 
          RowBox[{"[", "2", "]"}], "]"}], ",", 
         RowBox[{"mapToClass", "[", 
          RowBox[{"n1", ",", "n2", ",", "n3", ",", "n4", ",", 
           RowBox[{"#", "[", 
            RowBox[{"[", "4", "]"}], "]"}]}], "]"}]}], "}"}], "&"}], "/@", 
      "data"}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"lookForMax", "[", 
    RowBox[{"data_", ",", "r_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"#", "[", 
        RowBox[{"[", "1", "]"}], "]"}], ",", 
       RowBox[{"#", "[", 
        RowBox[{"[", "2", "]"}], "]"}], ",", 
       RowBox[{"#", "[", 
        RowBox[{"[", "3", "]"}], "]"}], ",", 
       RowBox[{"#", "[", 
        RowBox[{"[", "4", "]"}], "]"}], ",", 
       RowBox[{"KCS", "[", 
        RowBox[{
         RowBox[{"#", "[", 
          RowBox[{"[", "1", "]"}], "]"}], ",", 
         RowBox[{"#", "[", 
          RowBox[{"[", "2", "]"}], "]"}], ",", 
         RowBox[{"#", "[", 
          RowBox[{"[", "3", "]"}], "]"}], ",", 
         RowBox[{"#", "[", 
          RowBox[{"[", "4", "]"}], "]"}], ",", "data"}], "]"}]}], "}"}], 
     "&"}], "/@", " ", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"Sort", "[", 
       RowBox[{"RandomReal", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0.3", ",", "1"}], "}"}], ",", "4"}], "]"}], "]"}], ",", 
      RowBox[{"{", "r", "}"}]}], "]"}]}]}], ";"}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Visualize neuron activations for validation set (G)", "Section"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"ListLinePlot", "[", 
    RowBox[{
     RowBox[{"binCountsForData", "[", 
      RowBox[{"validation", "[", 
       RowBox[{"[", "x", "]"}], "]"}], "]"}], ",", 
     RowBox[{"PlotLegends", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"0", ",", "1", ",", "2", ",", "3", ",", "4"}], "}"}]}], ",", 
     RowBox[{"ImageSize", "\[Rule]", "Large"}], ",", 
     RowBox[{"Filling", "\[Rule]", "Axis"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"Range", "[", 
      RowBox[{"Length", "[", "rotations", "]"}], "]"}]}], "}"}]}], 
  "]"}]], "Input"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`x$$ = 1, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`x$$], {1, 2, 3, 4}}}, Typeset`size$$ = {
    629., {178., 182.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`x$6838$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`x$$ = 1}, 
      "ControllerVariables" :> {
        Hold[$CellContext`x$$, $CellContext`x$6838$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> ListLinePlot[
        $CellContext`binCountsForData[
         Part[$CellContext`validation, $CellContext`x$$]], 
        PlotLegends -> {0, 1, 2, 3, 4}, ImageSize -> Large, Filling -> Axis], 
      "Specifications" :> {{$CellContext`x$$, {1, 2, 3, 4}}}, "Options" :> {},
       "DefaultOptions" :> {}],
     ImageSizeCache->{680., {221., 228.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["Random split (G)", "Section"]], "Chapter"],

Cell[BoxData[
 RowBox[{
  RowBox[{"numberOfRandomTuples", "=", "100"}], ";"}]], "Input",
 CellChangeTimes->{{3.6413553616843214`*^9, 3.6413553630235434`*^9}, 
   3.6413555449011445`*^9, {3.6413556492617917`*^9, 3.64135567799171*^9}, 
   3.6413557553725085`*^9, {3.6413558162815704`*^9, 3.64135581640785*^9}, 
   3.6413562823464684`*^9, 3.641356357802258*^9, {3.6413564089625216`*^9, 
   3.6413564091344137`*^9}, 3.641453469408941*^9, {3.6414535523309937`*^9, 
   3.641453553865117*^9}, {3.643302411665017*^9, 3.6433024121193233`*^9}, 
   3.6433028052973156`*^9, {3.6433375103563538`*^9, 3.6433375104774337`*^9}, 
   3.6433376168323913`*^9, {3.643348398413046*^9, 3.6433483985858016`*^9}, {
   3.6433484718185215`*^9, 3.643348472293326*^9}, 3.64335123283987*^9, {
   3.643354031080919*^9, 3.64335403267968*^9}, {3.643426362461789*^9, 
   3.643426362618039*^9}, 3.6434269091140633`*^9, 3.6434273820427876`*^9, {
   3.6458969546702642`*^9, 3.6458969548102684`*^9}, {3.645897011583109*^9, 
   3.6458970117191224`*^9}, 3.6458972272363777`*^9, {3.6459400810300007`*^9, 
   3.645940081041994*^9}, 3.6459493112109904`*^9, {3.6487381443535013`*^9, 
   3.648738148485263*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"y", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"lookForMax", "[", 
      RowBox[{
       RowBox[{"validation", "[", 
        RowBox[{"[", "#", "]"}], "]"}], ",", "numberOfRandomTuples"}], "]"}], 
     "&"}], "/@", 
    RowBox[{"Range", "[", 
     RowBox[{"Length", "[", "rotations", "]"}], "]"}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.6461578700204873`*^9, 3.6461578735788565`*^9}, {
  3.6462753320830126`*^9, 3.6462753342114315`*^9}, {3.6462908216484203`*^9, 
  3.6462908221067286`*^9}, {3.64631404747412*^9, 3.646314047612221*^9}, {
  3.64633960720767*^9, 3.6463396110472317`*^9}, {3.646731797645793*^9, 
  3.6467317982461987`*^9}, {3.6487381555019493`*^9, 3.648738156234437*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getmax", "[", 
     RowBox[{"y", "[", 
      RowBox[{"[", "#", "]"}], "]"}], "]"}], "&"}], "/@", 
   RowBox[{"Range", "[", 
    RowBox[{"Length", "[", "rotations", "]"}], "]"}]}], "//", 
  "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.6467318072582617`*^9, 3.646731808212903*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"0.4478033003477091`", "0.6488752165696656`", "0.825493086535315`", 
      "0.9628025296805025`", "0.4724360774502475`"},
     {"0.486704865077052`", "0.7084950879618055`", "0.7730565810194405`", 
      "0.9165085655554128`", "0.4773653478780425`"},
     {"0.5108890613068651`", "0.6654201735150687`", "0.7527481975842363`", 
      "0.9343141899733047`", "0.47112319584363893`"},
     {"0.49242984441256843`", "0.6880723136558209`", "0.8419281047991654`", 
      "0.9238392673259939`", "0.47869808236400246`"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.646360575834875*^9, 3.646731874952243*^9, 
  3.648738183726818*^9}]
}, Open  ]],

Cell["\<\
so the kappa score for each of the rotations does not exceed 0.48\
\>", "Text"],

Cell[TextData[StyleBox["Merging G and GE by diagonals", "Section"]], "Text",
 CellChangeTimes->{{3.6465855848354425`*^9, 3.6465855901199408`*^9}, {
  3.648738374831207*^9, 3.6487383761500826`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"merge", "=", 
   RowBox[{"Join", "[", 
    RowBox[{
     RowBox[{"validation", "[", 
      RowBox[{"[", "1", "]"}], "]"}], ",", 
     RowBox[{"validationGE", "[", 
      RowBox[{"[", "1", "]"}], "]"}], ",", "2"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.6467318570982313`*^9, 3.6467318650896063`*^9}, {
   3.6467319110435257`*^9, 3.646731916523207*^9}, 3.646733066484499*^9, {
   3.648738186718816*^9, 3.6487381881247573`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"yDiag", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"#", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "[", 
        RowBox[{"[", "1", "]"}], "]"}], ",", 
       RowBox[{
        RowBox[{"#", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "[", 
        RowBox[{"[", "2", "]"}], "]"}], ",", 
       RowBox[{
        RowBox[{"#", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "[", 
        RowBox[{"[", "3", "]"}], "]"}], ",", 
       RowBox[{
        RowBox[{"#", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "[", 
        RowBox[{"[", "4", "]"}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"#", "[", 
         RowBox[{"[", "2", "]"}], "]"}], "[", 
        RowBox[{"[", "1", "]"}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"KCMergedDiag", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"#", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "[", 
          RowBox[{"[", "1", "]"}], "]"}], ",", 
         RowBox[{
          RowBox[{"#", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "[", 
          RowBox[{"[", "2", "]"}], "]"}], ",", 
         RowBox[{
          RowBox[{"#", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "[", 
          RowBox[{"[", "3", "]"}], "]"}], ",", 
         RowBox[{
          RowBox[{"#", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "[", 
          RowBox[{"[", "4", "]"}], "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"#", "[", 
           RowBox[{"[", "2", "]"}], "]"}], "[", 
          RowBox[{"[", "1", "]"}], "]"}], ",", "merge"}], "]"}]}], "}"}], 
     "&"}], "/@", " ", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Sort", "[", 
         RowBox[{"RandomReal", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "2"}], "}"}], ",", "4"}], "]"}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"RandomReal", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "1"}], ",", 
            RowBox[{"-", "0"}]}], "}"}], "]"}], "}"}]}], "}"}], ",", 
      RowBox[{"{", "numberOfRandomTuples", "}"}]}], "]"}]}]}], 
  ";"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Max", "[", 
  RowBox[{"yDiag", "[", 
   RowBox[{"[", 
    RowBox[{"All", ",", "6"}], "]"}], "]"}], "]"}]], "Input"],

Cell[BoxData["0.4665086654700029`"], "Output"]
}, Open  ]],

Cell["This kappa is too small to be interesting...", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"yDiag", "[", 
  RowBox[{"[", 
   RowBox[{
    RowBox[{
     RowBox[{"Position", "[", 
      RowBox[{"yDiag", ",", 
       RowBox[{"Max", "[", 
        RowBox[{"yDiag", "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", "6"}], "]"}], "]"}], "]"}]}], "]"}], "[", 
     RowBox[{"[", "1", "]"}], "]"}], "[", 
    RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{3.6465857480806217`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.8436973224303048`", ",", "1.0899594646866797`", ",", 
   "1.231717104401648`", ",", "1.3674089336378845`", ",", 
   RowBox[{"-", "0.8350627987068473`"}], ",", "0.4665086654700029`"}], 
  "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"Select", "[", 
       RowBox[{"merge", ",", 
        RowBox[{
         RowBox[{
          RowBox[{"#", "[", 
           RowBox[{"[", "2", "]"}], "]"}], "\[Equal]", "0"}], "&"}]}], "]"}], 
      "[", 
      RowBox[{"[", 
       RowBox[{"All", ",", 
        RowBox[{"{", 
         RowBox[{"8", ",", "4"}], "}"}]}], "]"}], "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Select", "[", 
       RowBox[{"merge", ",", 
        RowBox[{
         RowBox[{
          RowBox[{"#", "[", 
           RowBox[{"[", "2", "]"}], "]"}], "\[Equal]", "4"}], "&"}]}], "]"}], 
      "[", 
      RowBox[{"[", 
       RowBox[{"All", ",", 
        RowBox[{"{", 
         RowBox[{"8", ",", "4"}], "}"}]}], "]"}], "]"}]}], 
    "\[IndentingNewLine]", "}"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "0.5"}], ",", "1.5"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "0.5"}], ",", "1.5"}], "}"}]}], "}"}]}], ",", 
   RowBox[{"ImageSize", "\[Rule]", "Large"}], ",", 
   RowBox[{"PlotMarkers", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"Automatic", ",", "6"}], "}"}]}], ",", 
   RowBox[{"Epilog", "\[Rule]", 
    RowBox[{"divisionLinesDiag", "[", "\[IndentingNewLine]", 
     RowBox[{
     "0.8436973224303048`", ",", "1.0899594646866797`", ",", 
      "1.231717104401648`", ",", "1.3674089336378845`", ",", 
      RowBox[{"-", "0.8350627987068473`"}]}], "\[IndentingNewLine]", 
     "]"}]}]}], "]"}]], "Input"],

Cell[BoxData[
 GraphicsBox[{{}, {
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.002777777777777778], 
     AbsoluteThickness[1.6], GeometricTransformationBox[InsetBox[
       StyleBox["\<\"\[FilledCircle]\"\>",
        StripOnInput->False,
        FontSize->6], {0., 0.}], CompressedData["
1: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
iho9DAjoWG34t7JSuNMDRQWX269vvOyuR60hJPEqFcti8ofO68hjeRp8cMXI
8C92fOZTVoEeR2/VWLnBONWpTML2wjokrZkVmM7LQOSG/0JrJeQj7ZzjDHmf
aCu/66UI1Ab6U4q4CDKAl2GdYu44DXe+0xzO/grsWEOeMK5PpwsVDSgOb6kA
pklfNr17LMKtuy62d3a+xPi4if7Vm6UgovdYV5dLoRDZRr+81jQbJF2pZ201
aDxldS2o7F4u+ud/iSsjA1wl2qQFcf8lJYLarB9bvCUHtfKzHvMj1dhlQ/5K
h+yBi3WHVudj09RtASNHyuFMAdISXApZVPkoLBU0xvSwCLQ8nxSJyGmkAhNg
2k/nCFf+/3MMRRhatIvXsS137z3vHdZUchnV/iRylX0qQpa/9d57VQOfjOM2
HRfzMImX83R1Na7PdOzkVL4yGxRL7WCwcp++G618pGalWE6wXieLUKP3STv1
rI9MXy9DPPJD3Lolg8pm98lwZsDkmCE+CVD1rbHq4NFCa5/64D12/1fTvOtP
MY5fm/Essu17UCwh1+fsIZihnomorN64oaN3Ln4f+1NSmBKKZb4lzte5540f
13lVBHcv1qSCfC0UT06u31lHhkvGRhvmG9X4umbD46LtaYxnL8cvEp93Voba
xCZwSoSWDmQTHI/4HFKgiPDog1NN/ppsNKHB71y9T3CcYVx9PYUko0gxhdjq
OiXhekxy4au1PDTwzE6u/sKCzvFj6lb/mWvNVfUy42rep9HRo1IQco0M1Ew4
4tpqRFjKG5RxVXT5+HwUTFvnWbCmhPE4CpkeRI/BTvXyz08xYv3i7+eOlyjx
X53O3+o5mtCzy3X5KJ2G5X3IsSTG/lpLfyHs72a+X5ofgZsES/xVhGOpbkl+
/0ViaX67l3KHAhhVb4oHRZRiNAWQZlnvvVOFyBS3W/xzjQjjyWtoKwWhGC7r
mcPyj1JZ7k4WBhv7dBVw9W9JUp3QpRoNqrlNDdh5woSJFKwox+eSKYvm8+Qs
H1UI4m7TTUyGuuuzqNqRMpAt+FqVkOWHKTDCc+Glx88VoLFq+5XMh6W0+gVn
qkHbs89SaBZ/mVVLl4dHEtfhcREqkNSGNSlahJaXXy04LPuXNzXg6MBOc9br
0Ir+wrGoSwF6MlQbsSJ1vVsibKlgUYI/xAYzPA8PTxJgrxovtnwN+pKoQuaK
AYeOC/X4bOnft/SSBng+bOPxtxrMeLny481UBctZymL6PK6Om+Q87UG5hd0f
KsZ7+H8ORxEG3Hne6mXAO7ZPMWCZxmtRm71FCGpRNCZ3iAxOxP42yIit6o5V
K2bkwf6r8/uwU7mg+JyeGuvvV62Y1Yti5HqRwbjSmhdXxD1H1Y817qopAqHZ
t3woBcUDGzJx5c783ztHyzCT2H5UBnafqTCy405R1yATll9pcOVQXyMoPkBh
wSSue6qzJAuCwq926StiQFKHPVpnW/ng+lTUP3aLJGDgfm3pAO9J8Sx/Uokn
BFc/S8byYLnvl8Q+tTJhMwWP5rNcGRUcr9veur1HCu7/3m7/aQn+B7s9HXg=

      "]]}, 
    {RGBColor[0.880722, 0.611041, 0.142051], PointSize[0.002777777777777778], 
     AbsoluteThickness[1.6], GeometricTransformationBox[InsetBox[
       StyleBox["\<\"\[FilledSquare]\"\>",
        StripOnInput->False,
        FontSize->6], {0., 0.}], CompressedData["
1:eJwtlnk81Wkbxi2TmJpCCWUsKbtp0ap0WTpppIQW2RKRaKR1ahBlSxSdtNhC
Kk20qiwhDLIVx3pOnMNx1t85PxyNKErvmXfmj+u/+/N87vt5vtd1P3q+R138
5WVkZHKkkpVKTir30Z9iW/cI8HX1vjztOyT09JrUX6QQ2KR05H21xTBaA7oE
QaZciPQl8dmRI5DrUbOo6WXA3Lo3qDtNBI/F6pnV/d1Iy/ygef9VC3yEKnmC
BRzIjtP+NNUZgrXGmWErTxEymn+KsywksfJYga5CGRtVf/QVuxuyQbMSLzSP
H4T+ysLByy0EHNr2S0/ogog8GJpaTkdt2Bwz+wYOYg5UUQvcRhDa5h2x8SQf
4VmdN+9ljUDDxs/A+YkQAb2Hgzc/JfEsLrGvo6sHTEN72Ts+TEzOfrA2j98B
e87ON7M8+mB51edh2mohTL9qsgqr+XCjbuyZYAuwOt0z6fwnEprCD+pts+oQ
MqX9qceUwDLz5A+HlV9izsRVj2shXIxnJBC2hVy0GMuuUFIncDRgLI89n4cr
Z55naEaMwLaN9vDGmBBRm+cZ+V4dRuCMuMKQTwM45D+VUuzZj2bVLP8FuWys
o2doUOcJwVCsFU/GivDP9PrfJTgpajp0VpuBCtmAyuhsFkyDMwaPOXdhINtl
aROLhbWr/PN1OsUoi6an2R76iPUU++NfkrkwrR4M5e8VwTs2NXvXlBAhF0fT
954icJMb5bX9di1E+5SbpkpIxGl5tCpfaf1vjipsnXxxabqNAa0lm79cWMDH
50VDJewJAdTPhW46ZUYirCdnWUWEALRmoxse7hLs3e+l9qCO+19ffFAqBjoy
y9tRnH6qfoLCQ4vfuwbd31koeKo5cIHk42pW8TPGVTaWhMWk6+0mEBNdkaC3
nobapW+z2m0GcHLmM4vY952Y4LWcjq0cwN2F42G+WXRUFVn98dc3Eol1R380
VSOQ8qlTVFAwhLi1wZJKEzaMbUWnx9WGcZ8SQd1whAXdcCMa1Z6Had9XB3fH
CJB2LuGMOJyPB/nJVTrnBLAINtYd+s5FqFIV7jkwEFVsfWHQXoiZvowWPWNp
Xcgv068MSRyo/hY1M06EA0f0GmyUJBgnSx23XxCjcNHIlaTdQ6i+QEk2PlwK
g595Pmtk25AZ96Amm52LK++/GF+Rr0PqqkjHYFceVrS9XJZzU4S66edhH5/S
YXX+qWvhQiZmKWl4sTIF+CmpvDBhxggKitx9khPoCFnxz9OKYNdcFmm2mQHN
ZBclp0A+aDY3Q4XmfTCdtLNw+kWAU8Kx8kWJImRl5pZwtg9h2ZpH8+VKhSA6
TCbtikjYNxacmN3QBYuVDV4xxjx4DTbIX60ToEZ1rlHGcQny5KlPj+aL4Ec7
eXrlOgnWeHJvPw5hg6t87IRJGoGNb4xsInNZMGm01PJayscmKlU7bk8XaEue
3e2TcmCSHBJDofTDkB6ZlbGGjzlOT1L9L3IwrEBzpwXwoG7PMwg63AdX6w/f
ZcQi2BaJWZdqmYiuasqlvOJCbR1DYbiKj/baDVXXbgzh5hqtGwrTYmR+6dLS
1RiBd7lO8f5NTETolx3yyhOg089DIfMeHdq7Bi3rrwugJzcn1+EdDcPutpuE
DCYK3Nud5wT0YytrfWquCYlj/L0nogb4mCn+rsXfRiDa+desKINKXJfEeEeq
siB6ERL94WgfZu+dad23exhqMhzNVWN0mH0Ux9N9hNC58JBWINuCzEu7NDwU
Of/lFYG0802fJzQlYLysYFK1uvD4kOJbsykCqjtmeY+p8bGwykPXZnQI55eQ
vb/WDuC545vN5adE0O/9ci6ovAeqFUm+pUvZKJHN1tmi2AeK/1/pTYvFOJ74
pTTXuA8Kn8xPlJkRePRhtd6jFbXQmvVj9MrLJLycHRT3dBEoMLhYNtd6FGIt
+ec9G7hovHLZuvyxAIHX09onPbjYckCdMverEJka1GsJvYPYG27HLjrFwfJ5
lK3MHVzElG3NNfvKRaz0FrJfD+JWYMqFfGUShrljsSl/c5G4WgrCLyMY74js
/vq5C5WxpzhMFQJWr8PFf02y8Sl7NaZdyH99XtcF0/nEuR02JBxDRfKNGwaR
8fbA8sgZQ9DpXvSy5uQAducsiI4nRDCwbDazfdaDrrO7vvarfMC3I9wyYx4d
xS8Wqk64df3LDX8QgoUBgRuvjiC7uXPJGbsBPFapXldyUoT23xI8QxV4YD2+
eV9RQqI3b22ffUg/DnAmf48IEMGZTqHJ6/SD9VC8c/uvYky/LD9eMcRBvpej
BVPcgRJuiaulGxuv3kgDxY4PaVqnln7pgt9oRo3DjGbsrP+8PIzBh+Je69zb
m0i0J1E6GI0CuBWc3r5VLEb9csPAa3YCfKfuun9LXoznmTHt6rZtCJookOn/
jQ19/8S7TCGBce9wmvaTERR5z+Ztfs3DljNhynIfRf/2yWdAVboVy1QJVMvU
xKua87CsMjBZ3YVATr5s9F2nPvAiP/4+8mAYx/508PDkMGDh6h65LUqASxtY
3GIhHa8+Ur839kvz2ZVzL6O2DdlyPhujFdjI+OHo1jy5VlwSHJHN/dSPWbP3
MUXrB5A3I9DjnSWJG3aJRwRTfPg0VcmaexGYev7C9cR6DgKpbi7DlVL/uWle
DmfxwXLbqZFKDCH/uRF5R8jEgbo/u2ukPC4LyZMtn0HHvkQn2eW3CewwZIiO
O9ChEZ5+TV1TjIFlAdv2ULoxs2N5+GZHDkjnEu3YYC4UcsuT89aLsZgdFhk9
PgAdFdfFCd589Ep/CZ3VbNx+r3YvxocDQqJc7+THBrGf2jT/bxKiVPu1NYuF
eMqXqdaykkA5tXfcKoiE5w/1kwoGAvyseyvv7QiBVv8g1XI9EkpsWr1KcBs+
J8gLJ74xsEHjmZNMnRCUUZPgDN8RVFm1Zq95KMDSDWvkRi0laDlbX3nQj4dQ
knEibaEAzpU5sT8kMVHuse9OkaMQOas6jZak8ZG826F1jCpAd0rJ2/Z4Ngwd
bBf/5kcglNboIv4mRHKou+TOk2EsUkmK3vZWCO0kumGUL4nXpq99Qt9x8X8s
5UncimPr+zYJsPa+odloFIFVW6tdG66z4KT480mleALO5osvNWZwsCDe4k26
vAQBF/28+rZw0Un50Z8t5e+o/TrzM84DOKvdl/Wylw/9ynlSxJhIyfm8gv+Y
jdaqhuZ0t04krss6WLBtEKtKNeTF6+h4M3emknMlE3GPGE3bpklkujbK7KSQ
iBC53RtzHESKeXOP/xkR/gctjCyV
      "]]}, {}}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Epilog->{
    LineBox[{{-10, 9.194325309498778}, {10, -7.506930664638167}}], 
    LineBox[{{-10, 9.440587451755153}, {10, -7.260668522381793}}], 
    LineBox[{{-10, 9.58234509147012}, {10, -7.118910882666825}}], 
    LineBox[{{-10, 9.718036920706357}, {10, -6.983219053430588}}]},
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->Large,
  Method->{},
  PlotRange->{{-0.5, 1.5}, {-0.5, 1.5}},
  PlotRangeClipping->True,
  PlotRangePadding->{{0, 0}, {0, 0}},
  Ticks->{
   Automatic, 
    Automatic}]], "Output",ImageCache->GraphicsData["CompressedBitmap", "\<\
eJztfX2UVdWV501VvVeviioovotvBFQQUYwawU8URTRI0MQEo1EMLSGx08FE
jcYYASkQBUlpDIQEmXwYNSOSj6YQi6BgYnVgJUVPd0Kme63QWT0t07PWLHtW
z+qs1f/UvHPPx97nnN8+972C/De9GgzvvXvvufvs7/3b+9xy74Or7/v8vQ9+
duW9U2/84r1rVn925ZemLvrCF6sfNX4gyxoWZNkHVk3N1P8eyDL710D1//Vf
16m/1Men/0FX/p/WrH/XqmzVKvVnXdZzKv9F9U9/tmtdT3ZKX6F+05D/qDFb
13PK/GRA33OPvt2G/D/lbKB/V7bKXkr/u5F9zW9xqmddtqtf/+N1fafH8/80
5l/pha3K9NMr6qfuMrpNdbGrdmXVuzSbS/lTGtTfpYHq9fmlP/SXa55vbnQq
61mX34gvd5W+N1+u/rpR3dQnxivx3cEy9eUlQ+bqT8xbrtrVnzXVeOsknRvN
u+gdLRfcUnNCU8gJJbNK+piYpIgA3/z/3/95vn9RfzH15MmTu1esWJH/q7ng
mu/o/bXXnJw6deqK3bt3V9hljU4+duofd546dWrbmjVrTsycOVP9uLXgGTs0
s9jL1DPWbNu2rfKnP/0pG1Jwrf6i1PH++++vfeKJJ9Qj3bXtBdd+w79WPVf9
V/07G1Zw7XP6WvUc9Tz1XHft8IJrv+5fq56r3lu9fzay4NptmsSKrOqZ9rrR
BZdtpcvU49RWqi0dW3DZM/qyZXv37u2fO3euvWxcwWWb/cv2Llu2bG5/f/+E
gss26csWvFX9vwULFtjLJhVc1uVfpv6o/z2l4LIn9WXqCepJ9rKzCi5b51+m
3k+95/SCy57w5chednbBZY9j8Tu34LLHsCDOglL7aEL8zit40JcT4nd+wbUP
JcTvgoJrv5QQv7kF1z6QEL8PFly7BovfJQWX/RUWvw8VXPaXWPzmFVz2OSx+
lxdcthqL35UFl63C4nd1wWV/gcVvQcFln8bid13BZSuw+F1fcNndWPwWFVx2
Fxa/xQWXfTIhiDdB0V2eEL8PFzzt4wnxu6Xg2o8lxO8jBdfelhC/WwuuvRWL
30cLLvsIFr/bCy67BYvfUv17xa3u9+WCW30YiyS7lZWdrFJwq5uwmC4lweBi
2FJwtxux9LK7WTFTHxd5YzdgoV5KYsSFtsg/W4hlnd3NCqX6uMhjuxargKUk
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
/Y3euWd9ebLYiyawczf6Ck1hWtXOoZYiyfJJbFQgkGYK0NRf/ehVQiis/mZG
o1DlLQNAXUrIudTEpM5OlVUiD++NaFuS/WGpsS9iHkIGaKd3GT3qsN7OLbRH
XLrKYDsvxHwhaFKTKArxBgWYmwKpFiuO1RczapLnoZVBEI6BanOWT7SqcF4K
tUUjTAj2MuVII5VtqCsbNRO/pTmj/OnYs1CbXAGbfAGwED5dCjJi/klR1QcW
J/sHBW0Y4gukyqup7S5wD/W2D41AHr/npfn7P8P7CDPgMQco/44s4ToWV2+E
WmqqPW1m+jW1i5s9RTvCZbBVFO56ztfzUvjh4U7JM1CSc2XCuVq51A2NrLE/
TM6s0IcbBVjzyDKW88L5lgfnnJw4qrR2zdKZHX/8p/8hwz8P2yDHG/73PnbA
re1NDQaVW4v4cPbzYy9A6sbBS7kgQXPDJxt9ybWIgDbAJ9f4WtYe4iTMSgtN
YCA3BsBvFW0+FcRuuZapNnicSxg7M6pqE9nhmT/g5XpDRv7qzukdf/fctCIP
2GIKYRPGkHihhuG8OrL5XBjXqW9Vc2AwFt/FHE20gXaKS+ZQsKnn4huNIBXL
LapnwuP6OUc0haIyzN9wD7HiDh+X8R0J6OEQbiHDHV/xzRdYvuadg1A5C8N0
Ww0fyi05YZMbN08hSc9Kbtn62IVRW5aLQr5jdqMCSEeHbwvtRnGIBihbT2Za
MD/4aNpUKkPvOSVkc21DG9sCXuvgGdZYwwm+aIGpLxqLHabOwr462yVARHeU
kxLsZizeWiIsL1CPqF2GhhLHR1Yt5QMGp1IZ7r1fhYvQcBT4Pazrn1dzB1H3
lE9xF3CQ2E+OoRdyx6b6bUP+60ZP5QsTNszefS0WCpXyGwX27rJYLblNOo8s
+Yot9445Mb2zfdtnP0tHK0iOkeEREOUiB8qZj2U777+sf84cqsQik56qAjY7
WyWleMStFYw4R7+8uZOXAfJLf6/J/VWiYVStHQ1ofikxeGQKdCpW5/OmjG81
VbNFbP5TugMlEZ0s6P32lX0XTVPNN+PmvnOkH6W1qo+Bg4F+Azk6xILIMD2U
UCuoXpWg+2BI/pWYbd3UgrGA5BfHOiUgeRM1z2sFMQZwU+hwCu6S0AnfHlFW
HG/vGC81N1fQOmK7DWTyzfD5HZg3BOftgN6UR4jIUfv+OLApH9R3C6uUwX7Y
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
HP7ubg==\
\>"]]
}, Open  ]],

Cell[TextData[StyleBox["Average/minimum/maximum/harmonic mean of rotations \
(G)", "Section"]], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"getAveraged", "[", 
    RowBox[{"data_", ",", "func_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"#", "[", 
        RowBox[{"[", "1", "]"}], "]"}], ",", 
       RowBox[{"#", "[", 
        RowBox[{"[", "2", "]"}], "]"}], ",", 
       RowBox[{"#", "[", 
        RowBox[{"[", "3", "]"}], "]"}], ",", 
       RowBox[{"func", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"#", "[", 
           RowBox[{"[", "4", "]"}], "]"}], ",", 
          RowBox[{"#", "[", 
           RowBox[{"[", "8", "]"}], "]"}], ",", 
          RowBox[{"#", "[", 
           RowBox[{"[", "12", "]"}], "]"}], ",", 
          RowBox[{"#", "[", 
           RowBox[{"[", "16", "]"}], "]"}]}], "}"}], "]"}]}], "}"}], "&"}], "/@", 
    RowBox[{"Join", "[", 
     RowBox[{
      RowBox[{"data", "[", 
       RowBox[{"[", "1", "]"}], "]"}], ",", 
      RowBox[{"data", "[", 
       RowBox[{"[", "2", "]"}], "]"}], ",", 
      RowBox[{"data", "[", 
       RowBox[{"[", "3", "]"}], "]"}], ",", 
      RowBox[{"data", "[", 
       RowBox[{"[", "4", "]"}], "]"}], ",", "2"}], "]"}]}]}], ";"}]], "Input"],

Cell["\<\
we tried to take the maximum, minimum, harmonic mean and arithmetic mean of \
the activations of each image in the validation set and then look for good \
thresholds. The \[LineSeparator]best results are obtained on harmonic mean \
and arithmetic mean.\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"mean", "=", 
   RowBox[{"getAveraged", "[", 
    RowBox[{"validation", ",", "Mean"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"minimized", "=", 
   RowBox[{"getAveraged", "[", 
    RowBox[{"validation", ",", "Min"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"maximized", "=", 
   RowBox[{"getAveraged", "[", 
    RowBox[{"validation", ",", "Max"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"harmonic", "=", 
   RowBox[{"getAveraged", "[", 
    RowBox[{"validation", ",", "HarmonicMean"}], "]"}]}], ";"}]}], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"yMean", "=", 
   RowBox[{"lookForMax", "[", 
    RowBox[{"mean", ",", "500"}], "]"}]}], ";"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"getmax", "[", "yMean", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.5398341165489482`", ",", "0.7172969181531681`", ",", 
   "0.7601657583351111`", ",", "0.8432862979878946`", ",", 
   "0.49485526210976205`"}], "}"}]], "Output",
 CellChangeTimes->{3.6467332375417814`*^9, 3.6467333106021605`*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"yMin", "=", 
   RowBox[{"lookForMax", "[", 
    RowBox[{"minimized", ",", "500"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.6461578700204873`*^9, 3.6461578735788565`*^9}, {
   3.6462753320830126`*^9, 3.6462753342114315`*^9}, {3.6462908216484203`*^9, 
   3.6462908221067286`*^9}, {3.64631404747412*^9, 3.646314047612221*^9}, {
   3.64633960720767*^9, 3.6463396110472317`*^9}, {3.646731797645793*^9, 
   3.6467317982461987`*^9}, {3.646732139881519*^9, 3.646732147986972*^9}, 
   3.6467326070597477`*^9, {3.6467331144895616`*^9, 3.646733125239789*^9}, 
   3.6467332771567297`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"getmax", "[", "yMin", "]"}]], "Input",
 CellChangeTimes->{{3.646733117628669*^9, 3.646733117948887*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.4507308805116126`", ",", "0.6016949671896452`", ",", 
   "0.7007123345625379`", ",", "0.8545697827676708`", ",", 
   "0.48981460480447847`"}], "}"}]], "Output",
 CellChangeTimes->{3.646732511590502*^9, 3.6467331291664286`*^9, 
  3.646733356127389*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"yMax", "=", 
   RowBox[{"lookForMax", "[", 
    RowBox[{"maximized", ",", "500"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.646733184061804*^9, 3.646733191849041*^9}, 
   3.6467332803768964`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"getmax", "[", "yMax", "]"}]], "Input",
 CellChangeTimes->{{3.646733198958829*^9, 3.6467331990308704`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.6090440676745348`", ",", "0.7831594252020933`", ",", 
   "0.8928573912283402`", ",", "0.9558359155047578`", ",", 
   "0.4834416877454395`"}], "}"}]], "Output",
 CellChangeTimes->{3.646733199244015*^9, 3.646733391635376*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"yH", "=", 
   RowBox[{"lookForMax", "[", 
    RowBox[{"harmonic", ",", "500"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.646733206552933*^9, 3.646733209499913*^9}, 
   3.646733283016672*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"getmax", "[", "yH", "]"}]], "Input",
 CellChangeTimes->{{3.646733212575982*^9, 3.6467332164726095`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.4860281677630882`", ",", "0.6647831943144793`", ",", 
   "0.8008270989969475`", ",", "0.9077059090158073`", ",", 
   "0.49471025934947577`"}], "}"}]], "Output",
 CellChangeTimes->{3.646733216721772*^9, 3.6467334259869905`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ConfusionMatrix", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"#", "[", 
        RowBox[{"[", "2", "]"}], "]"}], ",", 
       RowBox[{"mapToClass", "[", "\[IndentingNewLine]", 
        RowBox[{
        "0.5398341165489482`", ",", "0.7172969181531681`", ",", 
         "0.7601657583351111`", ",", "0.8432862979878946`", 
         "\[IndentingNewLine]", ",", 
         RowBox[{"#", "[", 
          RowBox[{"[", "4", "]"}], "]"}]}], "]"}]}], "}"}], "&"}], "/@", 
    "mean"}], "]"}], "//", "TableForm"}]], "Input"],

Cell[BoxData[
 TagBox[GridBox[{
    {"4603", "673", "81", "110", "67"},
    {"411", "67", "11", "11", "10"},
    {"481", "305", "62", "102", "139"},
    {"22", "42", "14", "35", "66"},
    {"22", "27", "17", "34", "60"}
   },
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[2.0999999999999996`]}, 
       Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}, "RowsIndexed" -> {}}],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Kappa", "[", "%", "]"}]], "Input",
 CellChangeTimes->{{3.6468954293798704`*^9, 3.6468954310289755`*^9}}],

Cell[BoxData["0.49485526210976205`"], "Output"]
}, Open  ]],

Cell["\<\
this is the best performing solution. Kappa on private leaderboard is even \
higher! 0.50\
\>", "Text"],

Cell["\<\
The difference between the activations of non - rotated images and averaged \
activations is shown below\
\>", "Text",
 FormatType->"TextForm"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListLinePlot", "[", 
  RowBox[{
   RowBox[{"Join", "[", 
    RowBox[{
     RowBox[{"binCountsForData", "[", "mean", "]"}], ",", 
     RowBox[{"binCountsForData", "[", 
      RowBox[{"validation", "[", 
       RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "]"}], ",", 
   RowBox[{"PlotLegends", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "0", ",", "1", ",", 
      "2", ",", "3", ",", "4"}], "}"}]}], ",", 
   RowBox[{"ImageSize", "\[Rule]", "Large"}], ",", 
   RowBox[{"Filling", "\[Rule]", "Axis"}]}], "]"}]], "Input"],

Cell[BoxData[
 TemplateBox[{GraphicsBox[{{}, 
     GraphicsComplexBox[CompressedData["
1:eJzNl71uE0EUhReqlCkQpEhhVlawkGXwOk4MIcnG/P9DICBBKLCUOgVS6u1p
eAAqHoCKNKn8NlDyABSAfL6R9khXsiIkdpqjszM7e+d+Ozt3L04Odw/OZlnW
PZNlf3XWfm5n9VbW7UJZH7cof870mnRpptN9+WKm1Xv5gfxb+VX55/JD+Wfy
a9It6Xp93mwkbVkcxHvd/IY867yBV9s0v2V+23xpft580hbNk0/uUz7T+pal
A7vOOvKZVg/l29IH0hX1P5LvSB9LL6v/rnzXfE/+tvxVKZz60sJ0YKo44E/c
8E/rZl7yBH/yMzIf8adtmG8sfzXywDzwhxv8PY/3pOJfwRf+920e578rD/9X
8uI/fSkv/tWefN/GFzYe/nj2/1N5+D+Rwp/44L8jhT/zwp/3Hv7kFf5wgD/c
msqfeZfNt2x8br5tnn3H/fDnueKf4hT/FEfPPPuf+9j/3Mf+J044MQ/vLZzh
X9h1OMO/Y9dZV8SfeKPvf9P50+DPvCF/6bz8iQuOxNE13zMPf+KAP+uCI8+J
+KND0zVT+DMP/HOp1SHx+a/2377/UvIEF+W14vtHvfROXnkq38gPbbzylM7n
9fp9KV+8F1G+iK+x+0XKe7hkynvMfmFdek+rW/K5lHxxXlLvcF5y/vAe36k/
J9VbnJdjeeol1s1+gQv7hTyzX4g/qpeYZ956iTzDn7zCn9bY/aIWfS+Zhzxw
Hf7EDf+xfC7Fsy9uSuFP/Sz+ab/BiXpa/MvX8vCnHoIb9RX8GS/+Jf3iX76Q
hz//R+I/tf+lFB/8x9KRKfxZh+2TxJ/8Jv7STetv7HmpxrqYN7f+6LxkfHRe
EldULxFHVC/h2f/E4f950XnpdZTXSz27znPh799J1nfa/2W4NoW/18v4nPHS
tvWvWH/H+qN6mXmjepnxcGAdp62XmCeql3gu/Ikb/uQlPP/V/t35f+Xkx5eP
X5WX1qQ8mlw6mnzvJ//hwq+9z5/OJ3/87U9bLZL/Dd+hEYE=
      "], {{{}, {
         EdgeForm[], 
         Directive[
          RGBColor[0.368417, 0.506779, 0.709798], 
          Opacity[0.2]], 
         GraphicsGroupBox[{
           
           PolygonBox[{{2, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 298, 297, 
            6, 5, 4, 3}}]}]}, {}, {
         EdgeForm[], 
         Directive[
          RGBColor[0.880722, 0.611041, 0.142051], 
          Opacity[0.2]], 
         GraphicsGroupBox[{
           
           PolygonBox[{{25, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 
            35, 34, 33, 32, 31, 30, 29, 28, 27, 26}}]}]}, {}, {
         EdgeForm[], 
         Directive[
          RGBColor[0.560181, 0.691569, 0.194885], 
          Opacity[0.2]], 
         GraphicsGroupBox[{
           
           PolygonBox[{{58, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 
            70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59}}]}]}, {}, {
         EdgeForm[], 
         Directive[
          RGBColor[0.922526, 0.385626, 0.209179], 
          Opacity[0.2]], 
         GraphicsGroupBox[{
           PolygonBox[{{90, 93, 92, 91}}], 
           
           PolygonBox[{{95, 114, 113, 112, 111, 110, 109, 108, 107, 106, 105, 
            104, 103, 102, 101, 100, 99, 98, 97, 96}}]}]}, {}, {
         EdgeForm[], 
         Directive[
          RGBColor[0.528488, 0.470624, 0.701351], 
          Opacity[0.2]], 
         GraphicsGroupBox[{
           PolygonBox[{{125, 127, 126}, {123, 125, 124}}], 
           
           PolygonBox[{{127, 144, 143, 142, 141, 140, 139, 138, 137, 136, 135,
             134, 133, 132, 131, 130, 129, 128}}]}]}, {}, {
         EdgeForm[], 
         Directive[
          RGBColor[0.772079, 0.431554, 0.102387], 
          Opacity[0.2]], 
         GraphicsGroupBox[{
           
           PolygonBox[{{151, 165, 164, 163, 162, 161, 160, 159, 158, 157, 156,
             155, 300, 299, 154, 153, 152}}]}]}, {}, {
         EdgeForm[], 
         Directive[
          RGBColor[0.363898, 0.618501, 0.782349], 
          Opacity[0.2]], 
         GraphicsGroupBox[{
           PolygonBox[{{193, 195, 194}}], 
           
           PolygonBox[{{171, 193, 192, 191, 190, 189, 188, 187, 186, 185, 184,
             183, 182, 181, 180, 179, 178, 177, 176, 175, 174, 173, 
            172}}]}]}, {}, {
         EdgeForm[], 
         Directive[
          RGBColor[1, 0.75, 0], 
          Opacity[0.2]], 
         GraphicsGroupBox[{
           
           PolygonBox[{{204, 230, 229, 228, 227, 226, 225, 224, 223, 222, 221,
             220, 219, 218, 217, 216, 215, 214, 213, 212, 211, 210, 209, 208, 
            207, 206, 205}}]}]}, {}, {
         EdgeForm[], 
         Directive[
          RGBColor[0.647624, 0.37816, 0.614037], 
          Opacity[0.2]], 
         GraphicsGroupBox[{
           PolygonBox[{{239, 241, 240}, {261, 263, 262}}], 
           
           PolygonBox[{{242, 260, 259, 258, 257, 256, 255, 254, 253, 252, 251,
             250, 249, 248, 247, 246, 245, 244, 243}}]}]}, {}, {
         EdgeForm[], 
         Directive[
          RGBColor[0.571589, 0.586483, 0.], 
          Opacity[0.2]], 
         GraphicsGroupBox[{
           PolygonBox[{{291, 293, 292}}], 
           
           PolygonBox[{{270, 291, 290, 289, 288, 287, 286, 285, 284, 283, 282,
             281, 280, 279, 278, 277, 276, 275, 274, 273, 272, 
            271}}]}]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}}, {{}, {}, {
         Hue[0.67, 0.6, 0.6], 
         Directive[
          PointSize[0.011111111111111112`], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[1.6]], 
         LineBox[{1, 2, 3, 4, 5, 6, 297}], 
         LineBox[{298, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 
          21}]}, {
         Hue[0.9060679774997897, 0.6, 0.6], 
         Directive[
          PointSize[0.011111111111111112`], 
          RGBColor[0.880722, 0.611041, 0.142051], 
          AbsoluteThickness[1.6]], 
         LineBox[{22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 
          37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 
          53}]}, {
         Hue[0.1421359549995791, 0.6, 0.6], 
         Directive[
          PointSize[0.011111111111111112`], 
          RGBColor[0.560181, 0.691569, 0.194885], 
          AbsoluteThickness[1.6]], 
         LineBox[{54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 
          69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 
          85}]}, {
         Hue[0.37820393249936934`, 0.6, 0.6], 
         Directive[
          PointSize[0.011111111111111112`], 
          RGBColor[0.922526, 0.385626, 0.209179], 
          AbsoluteThickness[1.6]], 
         LineBox[{86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100,
           101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 
          114, 115, 116, 117}]}, {
         Hue[0.6142719099991583, 0.6, 0.6], 
         Directive[
          PointSize[0.011111111111111112`], 
          RGBColor[0.528488, 0.470624, 0.701351], 
          AbsoluteThickness[1.6]], 
         LineBox[{118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 
          130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 
          143, 144, 145, 146, 147, 148, 149}]}, {
         Hue[0.8503398874989481, 0.6, 0.6], 
         Directive[
          PointSize[0.011111111111111112`], 
          RGBColor[0.772079, 0.431554, 0.102387], 
          AbsoluteThickness[1.6]], 
         LineBox[{150, 151, 152, 153, 154, 299}], 
         LineBox[{300, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 
          166, 167, 168}]}, {
         Hue[0.08640786499873876, 0.6, 0.6], 
         Directive[
          PointSize[0.011111111111111112`], 
          RGBColor[0.363898, 0.618501, 0.782349], 
          AbsoluteThickness[1.6]], 
         LineBox[{169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 
          181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 
          194, 195, 196, 197, 198, 199, 200}]}, {
         Hue[0.3224758424985268, 0.6, 0.6], 
         Directive[
          PointSize[0.011111111111111112`], 
          RGBColor[1, 0.75, 0], 
          AbsoluteThickness[1.6]], 
         LineBox[{201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 
          213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 
          226, 227, 228, 229, 230, 231, 232}]}, {
         Hue[0.5585438199983166, 0.6, 0.6], 
         Directive[
          PointSize[0.011111111111111112`], 
          RGBColor[0.647624, 0.37816, 0.614037], 
          AbsoluteThickness[1.6]], 
         LineBox[{233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 
          245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 
          258, 259, 260, 261, 262, 263, 264}]}, {
         Hue[0.7946117974981064, 0.6, 0.6], 
         Directive[
          PointSize[0.011111111111111112`], 
          RGBColor[0.571589, 0.586483, 0.], 
          AbsoluteThickness[1.6]], 
         LineBox[{265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 
          277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 
          290, 291, 292, 293, 294, 295, 296}]}}}], {}}, {
    DisplayFunction -> Identity, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.05]}}, AxesOrigin -> {0, 0}, 
     PlotRange -> {{0., 32.}, {0, 145.}}, DisplayFunction -> Identity, 
     AspectRatio -> NCache[GoldenRatio^(-1), 0.6180339887498948], 
     Axes -> {True, True}, AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, 
     DisplayFunction :> Identity, Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], ImageSize -> Large, Method -> {}, 
     PlotRange -> {{0., 32.}, {0, 145.}}, PlotRangeClipping -> True, 
     PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}],FormBox[
    FormBox[
     TemplateBox[{"0", "1", "2", "3", "4", "0", "1", "2", "3", "4"}, 
      "LineLegend", DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.2], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.2], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.2], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.2], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.2], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.2], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.2], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.2], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #4}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.2], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.2], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #5}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.2], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.2], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #6}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.2], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.2], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #7}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.2], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.2], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #8}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.2], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.2], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #9}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.2], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.2], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #10}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"LineLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.011111111111111112`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    RowBox[{
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "\[InvisibleSpace]"}], 
                    "RGBColor[0.368417, 0.506779, 0.709798]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.011111111111111112`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    RowBox[{
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "\[InvisibleSpace]"}], 
                    "RGBColor[0.880722, 0.611041, 0.142051]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.011111111111111112`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    RowBox[{
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.37345400000000006`, 0.461046, 0.12992333333333334`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "\[InvisibleSpace]"}], 
                    "RGBColor[0.560181, 0.691569, 0.194885]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.560181, 0.691569, 0.194885]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.560181, 0.691569, 0.194885], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.011111111111111112`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    RowBox[{
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.6150173333333333, 0.25708400000000003`, 
                    0.13945266666666667`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "\[InvisibleSpace]"}], 
                    "RGBColor[0.922526, 0.385626, 0.209179]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.922526, 0.385626, 0.209179]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.922526, 0.385626, 0.209179], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.011111111111111112`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    RowBox[{
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.3523253333333333, 0.3137493333333333, 
                    0.46756733333333333`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "\[InvisibleSpace]"}], 
                    "RGBColor[0.528488, 0.470624, 0.701351]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.528488, 0.470624, 0.701351]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.528488, 0.470624, 0.701351], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.011111111111111112`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    RowBox[{
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.5147193333333333, 0.28770266666666666`, 
                    0.06825800000000001], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "\[InvisibleSpace]"}], 
                    "RGBColor[0.772079, 0.431554, 0.102387]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.772079, 0.431554, 0.102387]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.772079, 0.431554, 0.102387], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.011111111111111112`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    RowBox[{
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[0.24259866666666668`, 0.412334, 0.521566], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "\[InvisibleSpace]"}], 
                    "RGBColor[0.363898, 0.618501, 0.782349]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.363898, 0.618501, 0.782349]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.363898, 0.618501, 0.782349], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.011111111111111112`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    RowBox[{
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[1, 0.75, 0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> RGBColor[0.6666666666666666, 0.5, 0.],
                     FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "\[InvisibleSpace]"}], "RGBColor[1, 0.75, 0]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[1, 0.75, 0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[1, 0.75, 0], Editable -> False, Selectable -> 
                    False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.011111111111111112`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    RowBox[{
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.4317493333333333, 0.2521066666666667, 
                    0.40935800000000006`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "\[InvisibleSpace]"}], 
                    "RGBColor[0.647624, 0.37816, 0.614037]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.647624, 0.37816, 0.614037]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.647624, 0.37816, 0.614037], Editable -> False, 
                    Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.011111111111111112`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    RowBox[{
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.571589, 0.586483, 0.], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[0.38105933333333336`, 0.39098866666666665`, 0.], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "\[InvisibleSpace]"}], 
                    "RGBColor[0.571589, 0.586483, 0.]"], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.571589, 0.586483, 0.]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.571589, 0.586483, 0.], Editable -> False, 
                    Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             
             RowBox[{#, ",", #2, ",", #3, ",", #4, ",", #5, ",", #6, ",", #7, 
               ",", #8, ",", #9, ",", #10}], "}"}], ",", 
           RowBox[{"Joined", "\[Rule]", 
             RowBox[{"{", 
               
               RowBox[{
                "True", ",", "True", ",", "True", ",", "True", ",", "True", 
                 ",", "True", ",", "True", ",", "True", ",", "True", ",", 
                 "True"}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}]}], 
         "]"}]& ), Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Generate the submission CSV (based on averaged activations on G)\
\>", "Section"],

Cell[BoxData[
 RowBox[{
  RowBox[{"prediction", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"Import", "[", 
      RowBox[{
       RowBox[{"NotebookDirectory", "[", "]"}], "<>", 
       "\"\<predictions_g_01v234_40r-2-40r-2-40r-2-40r-4-256rd0.5-256rd0.5-\
wd0-lr0.001_48K-wd0.0015_iter_81000_\>\"", "<>", 
       RowBox[{"ToString", "[", "#", "]"}], "<>", "\"\<.csv\>\""}], "]"}], 
     "&"}], "/@", "rotations"}]}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Pmerge", "=", 
   RowBox[{"Join", "[", 
    RowBox[{
     RowBox[{"prediction", "[", 
      RowBox[{"[", "1", "]"}], "]"}], ",", 
     RowBox[{"prediction", "[", 
      RowBox[{"[", "2", "]"}], "]"}], ",", 
     RowBox[{"prediction", "[", 
      RowBox[{"[", "3", "]"}], "]"}], ",", 
     RowBox[{"prediction", "[", 
      RowBox[{"[", "4", "]"}], "]"}], ",", "2"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.6467318570982313`*^9, 3.6467318650896063`*^9}, {
  3.6467319110435257`*^9, 3.646731916523207*^9}, {3.6467324540422783`*^9, 
  3.6467324578228226`*^9}, {3.6469047332145042`*^9, 3.646904744857336*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Paveraged", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"#", "[", 
        RowBox[{"[", "1", "]"}], "]"}], ",", 
       RowBox[{"Mean", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"#", "[", 
           RowBox[{"[", "2", "]"}], "]"}], ",", 
          RowBox[{"#", "[", 
           RowBox[{"[", "4", "]"}], "]"}], ",", 
          RowBox[{"#", "[", 
           RowBox[{"[", "6", "]"}], "]"}], ",", 
          RowBox[{"#", "[", 
           RowBox[{"[", "8", "]"}], "]"}]}], "}"}], "]"}]}], "}"}], "&"}], "/@",
     "Pmerge"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.6467320534523835`*^9, 3.64673212431205*^9}, {
   3.6467324672692947`*^9, 3.6467324725938735`*^9}, 3.6469027834713554`*^9, {
   3.6469047316244383`*^9, 3.646904775295816*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PaveragedMapped", "=", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"#", "[", 
       RowBox[{"[", "1", "]"}], "]"}], ",", 
      RowBox[{"mapToClass", "[", "\[IndentingNewLine]", 
       RowBox[{
       "0.5398341165489482`", ",", "0.7172969181531681`", ",", 
        "0.7601657583351111`", ",", "0.8432862979878946`", 
        "\[IndentingNewLine]", ",", 
        RowBox[{"#", "[", 
         RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}], "}"}], "&"}], "/@", 
   "Paveraged"}]}]], "Input",
 CellChangeTimes->{{3.646904824873335*^9, 3.646904859046366*^9}}],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        TagBox[
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"\<\"10000_left.jpeg\"\>", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"\<\"10000_right.jpeg\"\>", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"\<\"10001_left.jpeg\"\>", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"\<\"10001_right.jpeg\"\>", ",", "2"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"\<\"10002_left.jpeg\"\>", ",", "3"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"\<\"10002_right.jpeg\"\>", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"\<\"10004_left.jpeg\"\>", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"\<\"10004_right.jpeg\"\>", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"\<\"10005_left.jpeg\"\>", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"\<\"10005_right.jpeg\"\>", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"\<\"10006_left.jpeg\"\>", ",", "1"}], "}"}], ",", 
           TemplateBox[{"53554"},
            "OutputSizeLimit`Skeleton",
            DisplayFunction->(FrameBox[
              RowBox[{"\" \[CenterEllipsis]\"", #, "\"\[CenterEllipsis] \""}],
               Background -> GrayLevel[0.75], 
              BaseStyle -> {
               "Deploy", FontColor -> GrayLevel[1], FontSize -> Smaller, 
                ShowStringCharacters -> False}, BaselinePosition -> Baseline, 
              ContentPadding -> False, FrameMargins -> 1, FrameStyle -> 
              GrayLevel[0.75], RoundingRadius -> 7]& )], ",", 
           RowBox[{"{", 
            RowBox[{"\<\"9991_right.jpeg\"\>", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"\<\"9994_left.jpeg\"\>", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"\<\"9994_right.jpeg\"\>", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"\<\"9995_left.jpeg\"\>", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"\<\"9995_right.jpeg\"\>", ",", "2"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"\<\"9997_left.jpeg\"\>", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"\<\"9997_right.jpeg\"\>", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"\<\"999_left.jpeg\"\>", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"\<\"999_right.jpeg\"\>", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"\<\"9_left.jpeg\"\>", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"\<\"9_right.jpeg\"\>", ",", "4"}], "}"}]}], "}"}],
         Short[#, 5]& ],
        BaseStyle->{Deployed -> False},
        StripOnInput->False]},
      {GridBox[{
         {
          TagBox[
           TooltipBox[
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource[
                "FEStrings", "sizeBriefExplanation"], StandardForm],
               ImageSizeCache->{65., {3., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarCategory",
             StripOnInput->False],
            StyleBox[
             DynamicBox[
              ToBoxes[
               FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"], 
               StandardForm]], DynamicUpdating -> True, StripOnInput -> 
             False]],
           Annotation[#, 
            Style[
             Dynamic[
              FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"]], 
             DynamicUpdating -> True], "Tooltip"]& ], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{52., {1., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            Identity, 41, 19397642581520063245, 5/2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{62., {1., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            Identity, 41, 19397642581520063245, 5 2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{44., {1., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            Identity, 41, 19397642581520063245, Infinity],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{78., {1., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           ButtonFunction:>FrontEndExecute[{
              FrontEnd`SetOptions[
              FrontEnd`$FrontEnd, 
               FrontEnd`PreferencesSettings -> {"Page" -> "Evaluation"}], 
              FrontEnd`FrontEndToken["PreferencesDialog"]}],
           Evaluator->None,
           Method->"Preemptive"]}
        },
        AutoDelete->False,
        FrameStyle->GrayLevel[0.85],
        GridBoxDividers->{"Columns" -> {False, {True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{2}}}]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    Background->RGBColor[0.9657, 0.9753, 0.9802],
    FrameMargins->{{12, 12}, {0, 15}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Out[41]]], "Output"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Export", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"NotebookDirectory", "[", "]"}], "<>", 
    "\"\<submission_g_01v234_40r-2-40r-2-40r-2-40r-4-256rd0.5-256rd0.5-wd0-\
lr0.001_48K-wd0.0015_iter_81000_ave_0.539834-0.717297-0.760166-0.843286.csv\>\
\""}], ",", "PaveragedMapped"}], "]"}]], "Input"],

Cell["\<\
Note that the generated CSV doesn\[CloseCurlyQuote]t have the header required \
by Kaggle, and file names include .jpeg extension which should be removed\
\>", "Text"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1198, 661},
WindowMargins->{{-8, Automatic}, {Automatic, 0}},
PrivateNotebookOptions->{"FileOutlineCache"->False},
TrackCellChangeTimes->False,
FrontEndVersion->"10.0 for Microsoft Windows (64-bit) (July 1, 2014)",
StyleDefinitions->"Default.nb"
]

